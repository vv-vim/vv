/* eslint-disable camelcase */

import { spawn } from 'child_process';
import { createDecodeStream, encode } from 'msgpack-lite';
import { writeFileSync } from 'fs';
import prettier from 'prettier';

const OUTPUT_FILE_NAME = 'packages/nvim/src/__generated__/uiEventTypes.ts';

const nvimProcess = spawn('nvim', ['--embed', '-u', 'NONE']);

nvimProcess.stderr.pipe(process.stdout);

const decodeStream = createDecodeStream();
const msgpackIn = nvimProcess.stdout.pipe(decodeStream);

const replaceType = (originalType: string) => {
  const replacements = {
    Array: 'Array<any>',
    String: 'string',
    Integer: 'number',
    Boolean: 'boolean',
    Tabpage: 'number',
    Float: 'number',
    Window: 'number',
    Dictionary: 'Record<string, any>',
    Object: 'any',
  } as Record<string, string>;
  return replacements[originalType] || originalType;
};

msgpackIn.on('data', (data) => {
  const apiInfo = data[3][1];
  writeFileSync('tmp/apiInfo.json', JSON.stringify(apiInfo, null, 2), { encoding: 'utf8' });
  const { ui_events } = apiInfo;

  const result: string[] = [];

  const version = [apiInfo.version.major, apiInfo.version.minor, apiInfo.version.patch].join('.');

  result.push('/* eslint-disable camelcase */');
  result.push('/**');
  result.push(' * Types generated by `yarn generate-types`. Do not edit manually.');
  result.push(` * `);
  result.push(` * Version: ${version}`);
  result.push(` * Api Level: ${apiInfo.version.api_level}`);
  result.push(` * Api Compatible: ${apiInfo.version.api_compatible}`);
  result.push(` * Api Prerelease: ${apiInfo.version.api_prerelease}`);
  result.push(' */');
  result.push('');

  result.push('/**');
  result.push(' * UI events types emitted by `redraw` event. Do not edit manually.');
  result.push(' * More info: https://neovim.io/doc/user/ui.html');
  result.push(' */');

  result.push('export type UiEvents = {');
  ui_events.forEach(({ name, parameters }: { name: string; parameters: string[][] }) => {
    const parametersType = parameters.map(([type, typeName]) => {
      return `${typeName}: ${replaceType(type)}`;
    });
    result.push(`  ${name}: [${parametersType.join(', ')}];\n`);
  });
  result.push('}\n');

  const prettified = prettier.format(result.join('\n'), { parser: 'typescript' });

  writeFileSync(OUTPUT_FILE_NAME, prettified, {
    encoding: 'utf8',
  });
});

nvimProcess.stdin.write(encode([0, 1, 'nvim_get_api_info', []]));

setTimeout(() => {
  nvimProcess.stdin.write(encode([0, 1, 'nvim_command', ['q']]));
}, 100);
